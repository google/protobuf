// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: decimal.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Protobuf.WellKnownTypes {

  /// <summary>Holder for reflection information generated from decimal.proto</summary>
  public static partial class DecimalReflection {

    #region Descriptor
    /// <summary>File descriptor for decimal.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DecimalReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1kZWNpbWFsLnByb3RvEiBnb29nbGUucHJvdG9idWYud2VsbF9rbm93bl90",
            "eXBlcyIeCg1EZWNpbWFsU3RyaW5nEg0KBXZhbHVlGAEgASgJIjIKCURlY2lt",
            "YWw2NBITCgtzaWduaWZpY2FuZBgBIAEoEhIQCghleHBvbmVudBgCIAEoESJf",
            "CgpEZWNpbWFsMTI4EgwKBHNpZ24YASABKBESFwoPc2lnbmlmaWNhbmRfbG93",
            "GAIgASgEEhgKEHNpZ25pZmljYW5kX2hpZ2gYAyABKAQSEAoIZXhwb25lbnQY",
            "BCABKBEikAEKEURlY2ltYWw2NFZlcnNpb24yEhMKC3NpZ25pZmljYW5kGAEg",
            "ASgSEhIKCGV4cG9uZW50GAIgASgRSAASSgoNc3BlY2lhbF92YWx1ZRgDIAEo",
            "DjIxLmdvb2dsZS5wcm90b2J1Zi53ZWxsX2tub3duX3R5cGVzLlNwZWNpYWxF",
            "bmNvZGluZ0gAQgYKBG1vZGUiwQEKEkRlY2ltYWwxMjhWZXJzaW9uMhIQCghu",
            "ZWdhdGl2ZRgBIAEoCBIXCg9zaWduaWZpY2FuZF9sb3cYAiABKAQSGAoQc2ln",
            "bmlmaWNhbmRfaGlnaBgDIAEoBBISCghleHBvbmVudBgEIAEoEUgAEkoKDXNw",
            "ZWNpYWxfdmFsdWUYBSABKA4yMS5nb29nbGUucHJvdG9idWYud2VsbF9rbm93",
            "bl90eXBlcy5TcGVjaWFsRW5jb2RpbmdIAEIGCgRtb2RlKmcKD1NwZWNpYWxF",
            "bmNvZGluZxIdChlTUEVDSUFMX1ZBTFVFX1VOU1BFQ0lGSUVEEAASBwoDTkFO",
            "EAESFQoRUE9TSVRJVkVfSU5GSU5JVFkQAhIVChFORUdBVElWRV9JTkZJTklU",
            "WRADYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Google.Protobuf.WellKnownTypes.SpecialEncoding), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.WellKnownTypes.DecimalString), global::Google.Protobuf.WellKnownTypes.DecimalString.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.WellKnownTypes.Decimal64), global::Google.Protobuf.WellKnownTypes.Decimal64.Parser, new[]{ "Significand", "Exponent" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.WellKnownTypes.Decimal128), global::Google.Protobuf.WellKnownTypes.Decimal128.Parser, new[]{ "Sign", "SignificandLow", "SignificandHigh", "Exponent" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.WellKnownTypes.Decimal64Version2), global::Google.Protobuf.WellKnownTypes.Decimal64Version2.Parser, new[]{ "Significand", "Exponent", "SpecialValue" }, new[]{ "Mode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.WellKnownTypes.Decimal128Version2), global::Google.Protobuf.WellKnownTypes.Decimal128Version2.Parser, new[]{ "Negative", "SignificandLow", "SignificandHigh", "Exponent", "SpecialValue" }, new[]{ "Mode" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum SpecialEncoding {
    [pbr::OriginalName("SPECIAL_VALUE_UNSPECIFIED")] SpecialValueUnspecified = 0,
    [pbr::OriginalName("NAN")] Nan = 1,
    [pbr::OriginalName("POSITIVE_INFINITY")] PositiveInfinity = 2,
    [pbr::OriginalName("NEGATIVE_INFINITY")] NegativeInfinity = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  ///
  /// A decimal number represented by a string.
  ///
  /// The string format must match this syntax:
  /// number    = [ "+" | "-" ] float .
  /// number    = "nan" | "+inf" | "-inf" .
  /// float     = digits [ "." digits ] [ exponent ] .
  /// float     = "." digits [ exponent ] .
  /// exponent  = "e" [ "+" | "-" ] digits .
  /// digits    = digit { digit } .
  /// digit     = "0" ... "9" .
  ///
  /// TODO: add documentation about which value range is representable
  /// by all protobuf languages.
  /// </summary>
  public sealed partial class DecimalString : pb::IMessage<DecimalString>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DecimalString> _parser = new pb::MessageParser<DecimalString>(() => new DecimalString());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DecimalString> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.WellKnownTypes.DecimalReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecimalString() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecimalString(DecimalString other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecimalString Clone() {
      return new DecimalString(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DecimalString);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DecimalString other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DecimalString other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Value = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// matches IEEE 754-2008 decimal64
  /// </summary>
  public sealed partial class Decimal64 : pb::IMessage<Decimal64>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Decimal64> _parser = new pb::MessageParser<Decimal64>(() => new Decimal64());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Decimal64> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.WellKnownTypes.DecimalReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Decimal64() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Decimal64(Decimal64 other) : this() {
      significand_ = other.significand_;
      exponent_ = other.exponent_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Decimal64 Clone() {
      return new Decimal64(this);
    }

    /// <summary>Field number for the "significand" field.</summary>
    public const int SignificandFieldNumber = 1;
    private long significand_;
    /// <summary>
    /// Allowed range is [-10^17, 10^17]. Exceeding these bounds is an error.
    /// A significand of exactly -10^17/10^17 represent +/- Infinity.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Significand {
      get { return significand_; }
      set {
        significand_ = value;
      }
    }

    /// <summary>Field number for the "exponent" field.</summary>
    public const int ExponentFieldNumber = 2;
    private int exponent_;
    /// <summary>
    /// Allowed range is [-383, 384].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exponent {
      get { return exponent_; }
      set {
        exponent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Decimal64);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Decimal64 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Significand != other.Significand) return false;
      if (Exponent != other.Exponent) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Significand != 0L) hash ^= Significand.GetHashCode();
      if (Exponent != 0) hash ^= Exponent.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Significand != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(Significand);
      }
      if (Exponent != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Exponent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Significand != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(Significand);
      }
      if (Exponent != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Exponent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Significand != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Significand);
      }
      if (Exponent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Exponent);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Decimal64 other) {
      if (other == null) {
        return;
      }
      if (other.Significand != 0L) {
        Significand = other.Significand;
      }
      if (other.Exponent != 0) {
        Exponent = other.Exponent;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Significand = input.ReadSInt64();
            break;
          }
          case 16: {
            Exponent = input.ReadSInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Significand = input.ReadSInt64();
            break;
          }
          case 16: {
            Exponent = input.ReadSInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// matches IEEE 754-2008 decimal128
  /// </summary>
  public sealed partial class Decimal128 : pb::IMessage<Decimal128>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Decimal128> _parser = new pb::MessageParser<Decimal128>(() => new Decimal128());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Decimal128> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.WellKnownTypes.DecimalReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Decimal128() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Decimal128(Decimal128 other) : this() {
      sign_ = other.sign_;
      significandLow_ = other.significandLow_;
      significandHigh_ = other.significandHigh_;
      exponent_ = other.exponent_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Decimal128 Clone() {
      return new Decimal128(this);
    }

    /// <summary>Field number for the "sign" field.</summary>
    public const int SignFieldNumber = 1;
    private int sign_;
    /// <summary>
    /// -1 for negative, +1 for positive, 0 for zero. If sign is zero, the significand must also be zero.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sign {
      get { return sign_; }
      set {
        sign_ = value;
      }
    }

    /// <summary>Field number for the "significand_low" field.</summary>
    public const int SignificandLowFieldNumber = 2;
    private ulong significandLow_;
    /// <summary>
    /// low and high 64 bits of the significand
    /// allowed range is [0, 10^34]. Exceeding these bounds is an error.
    /// A significand of exactly 10^34 represents +/- Infinity (based on sign)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SignificandLow {
      get { return significandLow_; }
      set {
        significandLow_ = value;
      }
    }

    /// <summary>Field number for the "significand_high" field.</summary>
    public const int SignificandHighFieldNumber = 3;
    private ulong significandHigh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SignificandHigh {
      get { return significandHigh_; }
      set {
        significandHigh_ = value;
      }
    }

    /// <summary>Field number for the "exponent" field.</summary>
    public const int ExponentFieldNumber = 4;
    private int exponent_;
    /// <summary>
    /// Allowed range is [-6143,+6144].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exponent {
      get { return exponent_; }
      set {
        exponent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Decimal128);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Decimal128 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Sign != other.Sign) return false;
      if (SignificandLow != other.SignificandLow) return false;
      if (SignificandHigh != other.SignificandHigh) return false;
      if (Exponent != other.Exponent) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Sign != 0) hash ^= Sign.GetHashCode();
      if (SignificandLow != 0UL) hash ^= SignificandLow.GetHashCode();
      if (SignificandHigh != 0UL) hash ^= SignificandHigh.GetHashCode();
      if (Exponent != 0) hash ^= Exponent.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Sign != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Sign);
      }
      if (SignificandLow != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(SignificandLow);
      }
      if (SignificandHigh != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(SignificandHigh);
      }
      if (Exponent != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Exponent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Sign != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Sign);
      }
      if (SignificandLow != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(SignificandLow);
      }
      if (SignificandHigh != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(SignificandHigh);
      }
      if (Exponent != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Exponent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Sign != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Sign);
      }
      if (SignificandLow != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SignificandLow);
      }
      if (SignificandHigh != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SignificandHigh);
      }
      if (Exponent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Exponent);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Decimal128 other) {
      if (other == null) {
        return;
      }
      if (other.Sign != 0) {
        Sign = other.Sign;
      }
      if (other.SignificandLow != 0UL) {
        SignificandLow = other.SignificandLow;
      }
      if (other.SignificandHigh != 0UL) {
        SignificandHigh = other.SignificandHigh;
      }
      if (other.Exponent != 0) {
        Exponent = other.Exponent;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Sign = input.ReadSInt32();
            break;
          }
          case 16: {
            SignificandLow = input.ReadUInt64();
            break;
          }
          case 24: {
            SignificandHigh = input.ReadUInt64();
            break;
          }
          case 32: {
            Exponent = input.ReadSInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Sign = input.ReadSInt32();
            break;
          }
          case 16: {
            SignificandLow = input.ReadUInt64();
            break;
          }
          case 24: {
            SignificandHigh = input.ReadUInt64();
            break;
          }
          case 32: {
            Exponent = input.ReadSInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Decimal64Version2 : pb::IMessage<Decimal64Version2>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Decimal64Version2> _parser = new pb::MessageParser<Decimal64Version2>(() => new Decimal64Version2());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Decimal64Version2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.WellKnownTypes.DecimalReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Decimal64Version2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Decimal64Version2(Decimal64Version2 other) : this() {
      significand_ = other.significand_;
      switch (other.ModeCase) {
        case ModeOneofCase.Exponent:
          Exponent = other.Exponent;
          break;
        case ModeOneofCase.SpecialValue:
          SpecialValue = other.SpecialValue;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Decimal64Version2 Clone() {
      return new Decimal64Version2(this);
    }

    /// <summary>Field number for the "significand" field.</summary>
    public const int SignificandFieldNumber = 1;
    private long significand_;
    /// <summary>
    /// matches IEEE 754-2008 decimal64
    /// Allowed range is (-10^17, 10^17). Exceeding these bounds is an error.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Significand {
      get { return significand_; }
      set {
        significand_ = value;
      }
    }

    /// <summary>Field number for the "exponent" field.</summary>
    public const int ExponentFieldNumber = 2;
    /// <summary>
    /// Allowed range is [-383, 384].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exponent {
      get { return modeCase_ == ModeOneofCase.Exponent ? (int) mode_ : 0; }
      set {
        mode_ = value;
        modeCase_ = ModeOneofCase.Exponent;
      }
    }

    /// <summary>Field number for the "special_value" field.</summary>
    public const int SpecialValueFieldNumber = 3;
    /// <summary>
    /// if special_value is set, both significand and exponent must be zero (not
    /// present)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.SpecialEncoding SpecialValue {
      get { return modeCase_ == ModeOneofCase.SpecialValue ? (global::Google.Protobuf.WellKnownTypes.SpecialEncoding) mode_ : global::Google.Protobuf.WellKnownTypes.SpecialEncoding.SpecialValueUnspecified; }
      set {
        mode_ = value;
        modeCase_ = ModeOneofCase.SpecialValue;
      }
    }

    private object mode_;
    /// <summary>Enum of possible cases for the "mode" oneof.</summary>
    public enum ModeOneofCase {
      None = 0,
      Exponent = 2,
      SpecialValue = 3,
    }
    private ModeOneofCase modeCase_ = ModeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModeOneofCase ModeCase {
      get { return modeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMode() {
      modeCase_ = ModeOneofCase.None;
      mode_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Decimal64Version2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Decimal64Version2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Significand != other.Significand) return false;
      if (Exponent != other.Exponent) return false;
      if (SpecialValue != other.SpecialValue) return false;
      if (ModeCase != other.ModeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Significand != 0L) hash ^= Significand.GetHashCode();
      if (modeCase_ == ModeOneofCase.Exponent) hash ^= Exponent.GetHashCode();
      if (modeCase_ == ModeOneofCase.SpecialValue) hash ^= SpecialValue.GetHashCode();
      hash ^= (int) modeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Significand != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(Significand);
      }
      if (modeCase_ == ModeOneofCase.Exponent) {
        output.WriteRawTag(16);
        output.WriteSInt32(Exponent);
      }
      if (modeCase_ == ModeOneofCase.SpecialValue) {
        output.WriteRawTag(24);
        output.WriteEnum((int) SpecialValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Significand != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(Significand);
      }
      if (modeCase_ == ModeOneofCase.Exponent) {
        output.WriteRawTag(16);
        output.WriteSInt32(Exponent);
      }
      if (modeCase_ == ModeOneofCase.SpecialValue) {
        output.WriteRawTag(24);
        output.WriteEnum((int) SpecialValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Significand != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Significand);
      }
      if (modeCase_ == ModeOneofCase.Exponent) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Exponent);
      }
      if (modeCase_ == ModeOneofCase.SpecialValue) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SpecialValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Decimal64Version2 other) {
      if (other == null) {
        return;
      }
      if (other.Significand != 0L) {
        Significand = other.Significand;
      }
      switch (other.ModeCase) {
        case ModeOneofCase.Exponent:
          Exponent = other.Exponent;
          break;
        case ModeOneofCase.SpecialValue:
          SpecialValue = other.SpecialValue;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Significand = input.ReadSInt64();
            break;
          }
          case 16: {
            Exponent = input.ReadSInt32();
            break;
          }
          case 24: {
            mode_ = input.ReadEnum();
            modeCase_ = ModeOneofCase.SpecialValue;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Significand = input.ReadSInt64();
            break;
          }
          case 16: {
            Exponent = input.ReadSInt32();
            break;
          }
          case 24: {
            mode_ = input.ReadEnum();
            modeCase_ = ModeOneofCase.SpecialValue;
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// matches IEEE 754-2008 decimal128
  /// </summary>
  public sealed partial class Decimal128Version2 : pb::IMessage<Decimal128Version2>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Decimal128Version2> _parser = new pb::MessageParser<Decimal128Version2>(() => new Decimal128Version2());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Decimal128Version2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.WellKnownTypes.DecimalReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Decimal128Version2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Decimal128Version2(Decimal128Version2 other) : this() {
      negative_ = other.negative_;
      significandLow_ = other.significandLow_;
      significandHigh_ = other.significandHigh_;
      switch (other.ModeCase) {
        case ModeOneofCase.Exponent:
          Exponent = other.Exponent;
          break;
        case ModeOneofCase.SpecialValue:
          SpecialValue = other.SpecialValue;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Decimal128Version2 Clone() {
      return new Decimal128Version2(this);
    }

    /// <summary>Field number for the "negative" field.</summary>
    public const int NegativeFieldNumber = 1;
    private bool negative_;
    /// <summary>
    /// true for negative numbers, false for positive numbers and zero
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Negative {
      get { return negative_; }
      set {
        negative_ = value;
      }
    }

    /// <summary>Field number for the "significand_low" field.</summary>
    public const int SignificandLowFieldNumber = 2;
    private ulong significandLow_;
    /// <summary>
    /// low and high 64 bits of the significand
    /// allowed range is [0, 10^34). Exceeding these bounds is an error.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SignificandLow {
      get { return significandLow_; }
      set {
        significandLow_ = value;
      }
    }

    /// <summary>Field number for the "significand_high" field.</summary>
    public const int SignificandHighFieldNumber = 3;
    private ulong significandHigh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SignificandHigh {
      get { return significandHigh_; }
      set {
        significandHigh_ = value;
      }
    }

    /// <summary>Field number for the "exponent" field.</summary>
    public const int ExponentFieldNumber = 4;
    /// <summary>
    /// Must be zero when special_value is set
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exponent {
      get { return modeCase_ == ModeOneofCase.Exponent ? (int) mode_ : 0; }
      set {
        mode_ = value;
        modeCase_ = ModeOneofCase.Exponent;
      }
    }

    /// <summary>Field number for the "special_value" field.</summary>
    public const int SpecialValueFieldNumber = 5;
    /// <summary>
    /// if special_value is set, all of significand, negative and exponent must
    /// have their default value (not present)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.SpecialEncoding SpecialValue {
      get { return modeCase_ == ModeOneofCase.SpecialValue ? (global::Google.Protobuf.WellKnownTypes.SpecialEncoding) mode_ : global::Google.Protobuf.WellKnownTypes.SpecialEncoding.SpecialValueUnspecified; }
      set {
        mode_ = value;
        modeCase_ = ModeOneofCase.SpecialValue;
      }
    }

    private object mode_;
    /// <summary>Enum of possible cases for the "mode" oneof.</summary>
    public enum ModeOneofCase {
      None = 0,
      Exponent = 4,
      SpecialValue = 5,
    }
    private ModeOneofCase modeCase_ = ModeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModeOneofCase ModeCase {
      get { return modeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMode() {
      modeCase_ = ModeOneofCase.None;
      mode_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Decimal128Version2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Decimal128Version2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Negative != other.Negative) return false;
      if (SignificandLow != other.SignificandLow) return false;
      if (SignificandHigh != other.SignificandHigh) return false;
      if (Exponent != other.Exponent) return false;
      if (SpecialValue != other.SpecialValue) return false;
      if (ModeCase != other.ModeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Negative != false) hash ^= Negative.GetHashCode();
      if (SignificandLow != 0UL) hash ^= SignificandLow.GetHashCode();
      if (SignificandHigh != 0UL) hash ^= SignificandHigh.GetHashCode();
      if (modeCase_ == ModeOneofCase.Exponent) hash ^= Exponent.GetHashCode();
      if (modeCase_ == ModeOneofCase.SpecialValue) hash ^= SpecialValue.GetHashCode();
      hash ^= (int) modeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Negative != false) {
        output.WriteRawTag(8);
        output.WriteBool(Negative);
      }
      if (SignificandLow != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(SignificandLow);
      }
      if (SignificandHigh != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(SignificandHigh);
      }
      if (modeCase_ == ModeOneofCase.Exponent) {
        output.WriteRawTag(32);
        output.WriteSInt32(Exponent);
      }
      if (modeCase_ == ModeOneofCase.SpecialValue) {
        output.WriteRawTag(40);
        output.WriteEnum((int) SpecialValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Negative != false) {
        output.WriteRawTag(8);
        output.WriteBool(Negative);
      }
      if (SignificandLow != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(SignificandLow);
      }
      if (SignificandHigh != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(SignificandHigh);
      }
      if (modeCase_ == ModeOneofCase.Exponent) {
        output.WriteRawTag(32);
        output.WriteSInt32(Exponent);
      }
      if (modeCase_ == ModeOneofCase.SpecialValue) {
        output.WriteRawTag(40);
        output.WriteEnum((int) SpecialValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Negative != false) {
        size += 1 + 1;
      }
      if (SignificandLow != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SignificandLow);
      }
      if (SignificandHigh != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SignificandHigh);
      }
      if (modeCase_ == ModeOneofCase.Exponent) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Exponent);
      }
      if (modeCase_ == ModeOneofCase.SpecialValue) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SpecialValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Decimal128Version2 other) {
      if (other == null) {
        return;
      }
      if (other.Negative != false) {
        Negative = other.Negative;
      }
      if (other.SignificandLow != 0UL) {
        SignificandLow = other.SignificandLow;
      }
      if (other.SignificandHigh != 0UL) {
        SignificandHigh = other.SignificandHigh;
      }
      switch (other.ModeCase) {
        case ModeOneofCase.Exponent:
          Exponent = other.Exponent;
          break;
        case ModeOneofCase.SpecialValue:
          SpecialValue = other.SpecialValue;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Negative = input.ReadBool();
            break;
          }
          case 16: {
            SignificandLow = input.ReadUInt64();
            break;
          }
          case 24: {
            SignificandHigh = input.ReadUInt64();
            break;
          }
          case 32: {
            Exponent = input.ReadSInt32();
            break;
          }
          case 40: {
            mode_ = input.ReadEnum();
            modeCase_ = ModeOneofCase.SpecialValue;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Negative = input.ReadBool();
            break;
          }
          case 16: {
            SignificandLow = input.ReadUInt64();
            break;
          }
          case 24: {
            SignificandHigh = input.ReadUInt64();
            break;
          }
          case 32: {
            Exponent = input.ReadSInt32();
            break;
          }
          case 40: {
            mode_ = input.ReadEnum();
            modeCase_ = ModeOneofCase.SpecialValue;
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
